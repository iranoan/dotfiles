# tmux起動時のシェルをzshにする
# set-option -g default-shell /bin/zsh

# tmuxを256色表示できるようにする
set-option -g default-terminal screen-256color
set-option -g terminal-overrides 'xterm:colors=256'

set-option -g prefix C-j                                             # prefixキーを C-j に変更
unbind-key C-b                                                       # C-b のキーバインドを解除

# TPM (Tmux Plugin Manager)
set-option -g @plugin 'tmux-plugins/tpm'                             # tmux-plugin-manager
set-option -g @plugin 'tmux-plugins/tmux-open'                       # 選択範囲を関連付けや EDITOR で開く
# set-option -g @open 'o'                                            # o で 関連付けで開く←デフォルト
set-option -g @open-editor 'O'                                       # EDITOR で開く
set-option -g @open-S 'https://www.google.co.jp/search?q='           # Google で検索
run-shell '~/.tmux/plugins/tpm/tpm'                                  # tpm を起動←必ず TPM 関連の最後

# スクロロールの履歴
set-option -g history-limit 30000
# ステータス・バー
set-option -g status-position top                                    # トップに配置する
# 左右のステータスバーの長さを決定する
set-option -g status-left-length 20
set-option -g status-right-length 30
# 色を設定する
set-option -g status-bg 'color10'
set-option -g status-fg 'color15'
# 表示する項目
# set-option -g status-left '[#P] #{pane_current_path}'
# set-option -g status-left '[#P] #(pwd | sed -e 's:^$HOME:~:g' -e 's:^~$:~\/:g')'
set-option -g status-left '#[bg=color2,bold] #S:#I.#P #[none]mouse #{?mouse,on,off} ' # セッション:ウィンドウ.ペイン マウス on/off
set-window-option -g window-status-format '#W'                       # 実行中のプログラム
set-window-option -g window-status-current-format '#[bold]#W'
set-option -g status-right '#[bg=color3,bold] #( whoami )@#H '       # アカウント名@ホスト
# ↑su でユーザ切り替えには効いていない (id -u -n, who | head -1 | cuf -d" " -f1 のどちらもダメ)
set-option -g status-interval 1                                      # 1秒毎に描画し直す
set-option -g status-justify centre                                  # 中央表示
# bind-key a set-window-option synchronize-panes\; display-message 'synchronize-panes is now #{?pane_synchronized,on,off}'
# bind-key a run-shell 'if  tmux show-options -w | grep 'synchronize-panes.*on' ; then toggle=off; else export toggle=on; fi; tmux display-message "sync panes tmux: $toggle"; tmux set-option -w synchronize-panes $toggle &> /dev/null'
# マウス操作を有効にする
set-option -g mouse on # ←これだけで動作
bind-key m run-shell 'if tmux show-options mouse | grep -qv on || tmux show-options -g mouse | grep -qv on; then tmux set-option -w mouse on; else tmux set-option -w mouse off; fi' # マウス ON/OFF トグル
# bind-key -T root WheelUpPane   if-shell -F -t = '#{alternate_on}' 'send-keys -M' 'select-pane -t =; copy-mode -e; send-keys -M'
# bind-key -T root WheelDownPane if-shell -F -t = '#{alternate_on}' 'send-keys -M' 'select-pane -t =; send-keys -M'

# キー・バインド
bind-key C-l source-file ~/.tmux.conf \; display "Reloaded!"         # 設定リロード
bind-key Q kill-window                                               # ウィンドウを閉じる
bind-key q kill-pane                                                 # ペインを閉じる
bind-key ? run-shell 'tmux list-keys | grep -Ev "bind-key\s+-T\s+root" | sed -E -e "s/^bind-key +-T prefix +([^ ]+ +display-menu) .+/\\1/g" -e "s/^bind-key (  |-r) -T (prefix +)?\\\\([^ ]+)/\\3 /" -e "s/^bind-key (  |-r) -T (prefix +)?//" -e "s/^(copy-mode-vi|copy-mode) \\\\([^ ]+)/\\1 \\2 /" -e "s/send-keys -X //g" -e "s/command-prompt [a-z0-9 -]+ \"[^\"]+\" \"send(-keys)? -X ([^\"]+)\"/\\2/g" | cut --characters=1-112' # ユーザ設定も含めて キー・バインドを表示 $(tpus cols) による取得はうまく働かない
# vimのキーバインドでペインを移動する
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R
# vimのキーバインドでペインをリサイズする
bind-key -r < resize-pane -L 3
bind-key -r + resize-pane -D 3
bind-key -r - resize-pane -U 3
bind-key -r > resize-pane -R 3
# ウィンドウ起動、ペインを分割する (カレント・ディレクトリを引き継ぐ)
bind-key c new-window      -c '#{pane_current_path}'
bind-key v split-window -h -c '#{pane_current_path}'
bind-key s split-window -v -c '#{pane_current_path}'
bind-key t next-window                                               # windows は vi のタブ・ページの感覚
bind-key T previous-window
# セッション・リスト
# bind-key l list-sessions
# コピーモードを設定する # select-pane -R と重なっている
set-window-option -g mode-keys vi                                    # コピーモードでvimキーバインドを使う
set -g mode-style "fg=default,bg=default,reverse"                    # コピーモードのハイライト
bind-key -T copy-mode-vi Space  send-keys -X page-down               # Space でページダウン
bind-key -T copy-mode-vi BSpace send-keys -X page-up                 # BS でページアップ
# bind-key -T copy-mode-vi S-Space send-keys -X page-up                # Shift+Space でページアップ←効かない
bind-key -T copy-mode-vi C-[    send-keys -X clear-selection         # C-[ で選択キャンセル
# bind-key -T copy-mode-vi v      send-keys -X begin-selection         # 'v' で選択を始める
bind-key -T copy-mode-vi v      if -F '#{selection_present}' { send -X clear-selection } { send -X begin-selection }
bind-key -T copy-mode-vi V      send-keys -X select-line             # 'V' で行選択
bind-key -T copy-mode-vi C-v    send-keys -X rectangle-toggle        # 'C-v' で矩形選択
bind-key -T copy-mode-vi y      send-keys -X copy-selection          # 'y' でヤンク
bind-key -T copy-mode-vi Y      send-keys -X copy-line               # 'Y' で行ヤンク
bind-key -T copy-mode-vi p      send-keys -X cancel\; paste-buffer -p # 'p' でノーマル・モードに戻り貼り付け
bind-key p paste-buffer -p                                           # 'p' で貼り付け (既にノーマルモードの時)
bind-key -T copy-mode-vi C-y    send-keys -X copy-pipe-and-cancel 'if [ "$XDG_SESSION_TYPE" = "x11" ]; then xsel -bi; else wl-copy; fi' # C-y でクリップボードにコピー
# v 選択のみテキスト・オブジェクト (単語とカッコのみ) に対応
# カッコ、引用符は同一行内のみの対応で、カーソル位置が開きカッコ、引用符に有る時は前に一つずれてしまう
bind-key -T copy-mode-vi a      switch-client -T text-objectA
bind-key -T copy-mode-vi i      switch-client -T text-objectI
bind-key -T text-objectA w      if -F '#{selection_present}' { send -X cursor-right ; send -X select-word }
bind-key -T text-objectI w      if -F '#{selection_present}' { send -X cursor-right ; send -X select-word }
bind-key -T text-objectA '"'    if -F '#{selection_present}' { send -X clear-selection; send -X jump-backward '"'; send -X begin-selection; send -X jump-forward '"' }
bind-key -T text-objectA "'"    if -F "#{selection_present}" { send -X clear-selection; send -X jump-backward "'"; send -X begin-selection; send -X jump-forward "'" }
bind-key -T text-objectA "{"    if -F '#{selection_present}' { send -X clear-selection; send -X jump-backward '{'; send -X begin-selection; send -X jump-forward '}' }
bind-key -T text-objectA "}"    if -F '#{selection_present}' { send -X clear-selection; send -X jump-backward '{'; send -X begin-selection; send -X jump-forward '}' }
bind-key -T text-objectA (      if -F '#{selection_present}' { send -X clear-selection; send -X jump-backward (; send -X begin-selection; send -X jump-forward ) }
bind-key -T text-objectA )      if -F '#{selection_present}' { send -X clear-selection; send -X jump-backward (; send -X begin-selection; send -X jump-forward ) }
bind-key -T text-objectA [      if -F '#{selection_present}' { send -X clear-selection; send -X jump-backward [; send -X begin-selection; send -X jump-forward ] }
bind-key -T text-objectA ]      if -F '#{selection_present}' { send -X clear-selection; send -X jump-backward [; send -X begin-selection; send -X jump-forward ] }
bind-key -T text-objectA <      if -F '#{selection_present}' { send -X clear-selection; send -X jump-backward <; send -X begin-selection; send -X jump-forward > }
bind-key -T text-objectA >      if -F '#{selection_present}' { send -X clear-selection; send -X jump-backward <; send -X begin-selection; send -X jump-forward > }
bind-key -T text-objectI '"'    if -F '#{selection_present}' { send -X clear-selection; send -X jump-to-backward '"'; send -X begin-selection; send -X jump-to-forward '"' }
bind-key -T text-objectI "'"    if -F "#{selection_present}" { send -X clear-selection; send -X jump-to-backward "'"; send -X begin-selection; send -X jump-to-forward "'" }
bind-key -T text-objectI "{"    if -F '#{selection_present}' { send -X clear-selection; send -X jump-to-backward '{'; send -X begin-selection; send -X jump-to-forward '}' }
bind-key -T text-objectI "}"    if -F '#{selection_present}' { send -X clear-selection; send -X jump-to-backward '{'; send -X begin-selection; send -X jump-to-forward '}' }
bind-key -T text-objectI (      if -F '#{selection_present}' { send -X clear-selection; send -X jump-to-backward (; send -X begin-selection; send -X jump-to-forward ) }
bind-key -T text-objectI )      if -F '#{selection_present}' { send -X clear-selection; send -X jump-to-backward (; send -X begin-selection; send -X jump-to-forward ) }
bind-key -T text-objectI [      if -F '#{selection_present}' { send -X clear-selection; send -X jump-to-backward [; send -X begin-selection; send -X jump-to-forward ] }
bind-key -T text-objectI ]      if -F '#{selection_present}' { send -X clear-selection; send -X jump-to-backward [; send -X begin-selection; send -X jump-to-forward ] }
bind-key -T text-objectI <      if -F '#{selection_present}' { send -X clear-selection; send -X jump-to-backward <; send -X begin-selection; send -X jump-to-forward > }
bind-key -T text-objectI >      if -F '#{selection_present}' { send -X clear-selection; send -X jump-to-backward <; send -X begin-selection; send -X jump-to-forward > }
# unbind (使わないキーは list-keys した時に邪魔)
unbind-key -aT copy-mode
# unbind-key -T copy-mode-vi NPage
# unbind-key -T copy-mode-vi PPage
# unbind-key -T copy-mode-vi Up
# unbind-key -T copy-mode-vi Down
# unbind-key -T copy-mode-vi Left
# unbind-key -T copy-mode-vi Right
unbind-key -T prefix    \"
unbind-key -T prefix    %
unbind-key -T prefix    ]
unbind-key -T prefix    &
unbind-key -T prefix    n
unbind-key -T prefix    Up
unbind-key -T prefix    Down
unbind-key -T prefix    Left
unbind-key -T prefix    Right
unbind-key -T prefix    C-Up
unbind-key -T prefix    C-Down
unbind-key -T prefix    C-Left
unbind-key -T prefix    C-Right
unbind-key -T prefix    S-Up
unbind-key -T prefix    S-Down
unbind-key -T prefix    S-Left
unbind-key -T prefix    S-Right
