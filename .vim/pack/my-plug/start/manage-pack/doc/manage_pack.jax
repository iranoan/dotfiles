*manage_pack.jax* ~/.vim/pack/ のプラグイン管理用プラグイン

Author:  Iranoan <iranoan+vim@gmail.com>
License: GPL Ver.3.


==============================================================================
                                                      *manage_pack-introduction*
~/.vim/pack でプラグインを管理を少しでも便利にする関数・コマンド群
                                                          *manage_pack-commands*
コマンド~

ReinstallPack {args}                                 *manage_pack-ReinstallPack*
	* {args} で指定されたプラグラインを強制的に再インストールする
	* Setup() (|manage_pack#Setup()|) で説明が記載済みの必要がある
                                                         *manage_pack-functions*
関数 ~

Helptags()                                                *manage_pack#Helptags()*
	* ~/.vim/pack に有るヘルプのタグを纏めて |packadd| 使用前でもヘルプを引けるよ
		うにする
	* 0 以外の数値を引数に与えると、必ずタグ・ファイルを再作成する
	* 引数がなかったり、0 を与えた場合は、タグ・ファイルより新しいヘルプ・ファイ
		ルがあった時のみ再作成する

	使用法: >
		:call manage_pack#Helptags()
		:call manage_pack#Helptags(0)
		:call manage_pack#Helptags(1)
<
IsInstalled({plugin})                                 *manage_pack#IsInstalled()*
	{plugin} が既に |runtimepath| に加わっているか確認する

	plugin: 確認するプラグイン名

	使用法: >
		:call manage_pack#IsInstalled('plugin')

SetMAP({plugin}, {cmd}, {map})                              *manage_pack#SetMAP()*
	nmap k <Plug>... の要領で <Plug> にマッピングするプラグインを遅延読み込みを
	実現させる

	plugin: 読み込むプラグイン名
	cmd:    実際に実行するコマンド (先頭の <Plug> は省略)
	        <Plug>command1<Plug>command2 のように複数の場合は
	        'command1<Plug>command2' の様に先頭の <Plug> のみ除く
	map:    マッピングの内容の辞書リスト
	{
		mode: n, x, o などのモード
		key: 割り当てるキーマップ {lhs}
		cmd: 割り当てるコマンド (<Plug> を除く)
	}

	記載例: >
	call manage_pack#SetMAP('plugin', 'Commad', [
				\ {'mode': 'n', 'key': 'lhs',  'cmd': 'Commad'},
				\ {'mode': 'x', 'key': 'lhs',  'cmd': 'Commad'}
				\ ] )
<
Setup()                                                      *manage_pack#Setup()*
	プラグインを導入/削除する

	詳細:
	* ~/.vim/plugin/*.vim か ~/.vim/autoload/*.vim に >
		# [comment] http://github.com/author/plugin {{{
<		や >
		" [comment] http://github.com/author/plugin {{{
<		の様に Repository の URL がフォールド・マーカー直前に有れば、導入対象にな
		り ~/.vim/pack/github/start/ に入れる
	* ただし、その中で >
		packadd plugin
<		やキーマップ用の関数で >
		call manage_pack#SetMAP('plugin', 'execute_command', [
					\ {'mode': 'n', 'key': '{lhs}', 'cmd': 'command'},
					\ {'mode': 'x', 'key': '{lhs}', 'cmd': 'command'}
					\ ] )
<		の要領の記載が有る plugin は遅延読み込みとして ~/.vim/pack/github/opt/ に入れる
	* start, opt の配置が記載と違いが有れば移動する
		設定のないものは ~/.vim/pack/github/ から削除する
