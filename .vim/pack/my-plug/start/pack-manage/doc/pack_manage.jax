*pack_manage* ~/.vim/pack/ のプラグイン管理用プラグイン

Author:  Iranoan <iranoan+vim@gmail.com>
License: GPL Ver.3.


==============================================================================
                                                      *pack_manage-introduction*
~/.vim/pack でプラグインを管理を少しでも便利にする関数・コマンド群

                                                      *pack_manage-configration*
概要~

~/.vim/vimrc, ~/.vim/gvimrc, ~/.vim/plugin/*.vim, ~/.vim/autoload/*.vim に >
	" [comment] http://github.com/author/plugin {{{
<や >
	# [comment] http://github.com/author/plugin {{{ # Vim9Script
<の様なフォールド・マーカー直前のリポジトリの URL の記載や >
	packadd plugin
<といった記載のプラグインを管理対象にする
>
ここで [comment] はそのプラグインについてのコメントを意味し無くても良い

                                                          *pack_manage-commands*
コマンド~

PackManage {args}                                       *pack_manage-PackManage*
	* {args} で指定されたサブコマンド (|pack_manage-subcommands|) を実行する
                                                        *pack_manage-subcommands*
サブコマンド~

help                                                      *pack_manage-sub_help*
	* このヘルプ表示する

list                                                      *pack_manage-sub_list*
	* 概要 (|pack_manage-configration|) 記載の書式の一覧を表示する
		- +popupwin だとポップアップ表示し c, q, x, <Esc> で閉じる
		- そうでなければ、コマンドラインに表示する
	* 表示項目は
		- インストールされていれば、行頭に I
		- 続いて /opt/ にインストールされるなら O
		- その後ろにプラグイン名、その後に入手先
			複数有る場合は、最初に見つかった入手先を一覧に表示し |Quickfix| も表示する

reintsll {args}                                      *pack_manage-sub_reinstall*
	* {args} で指定したプラグラインを強制的に再インストールする
	* 概要 (|pack_manage-configration|) 記載の書式で導入元の URL が書かれている必要がある
	* 記載が複数あれば |Quickfix| にも表示し、入手先に食い違いがあれば、インス
		トールしない

tags [{flag}]                                              *pack_manage-sub_tags*
	* ~/.vim/pack に有るヘルプのタグを纏めて |packadd| 使用前でもヘルプを引けるよ
		うに ~/.vim/doc/tags, ~/.vim/doc/tags-?? に出力する
	* {flag} が 0 以外だと必ずタグ・ファイルを再作成する
	* {flag} がなかったり、0 を与えた場合は、タグ・ファイルより新しいヘルプ・ファ
		イルがあった時のみ再作成する

	使用法: >
		:PackManage tags
		:PackManage tags 0
		:PackManage tags 1
<
setup                                                    *pack_manage-sub_setup*
	* プラグインを導入/削除する
	* 概要 (|pack_manage-configration|) 記載の書式で導入元の URL が書かれている必要がある
	* 記載が複数あれば |Quickfix| にも表示し、入手先に食い違いがあれば、インス
		トールしない
	* 記載されたプラグインの内 >
		packadd plugin
<		やキーマップ用の関数で >
		call pack_manage#SetMAP('plugin', 'execute_command', [
					\ {'mode': 'n', 'key': '{lhs}', 'cmd': 'command'},
					\ {'mode': 'x', 'key': '{lhs}', 'cmd': 'command'}
					\ ] )
<		の要領の記載が有る plugin は遅延読み込みとして ~/.vim/pack/github/opt/ に入れる
	* そうでなければ ~/.vim/pack/github/start/ に入れる
	* start, opt の配置が記載と違いが有れば移動する
	* 記載のないものは ~/.vim/pack/github/ から削除する
                                                         *pack_manage-functions*
関数 ~

GetPackLs()                                             *pack_manage#GetPackLs()*
	* インストールされているプラグインの名称をキーとするその情報の |Dictionaries|
		- dir:  保存場所
		- info: 次のインストール元や記載箇所を要素とする辞書リスト
			+ url:  入手元のリポジトリの URL
			+ file: 記載が書かれているファイルのパス名
			+ line: その記載された行番号

	使用法: >
		let packinfo = pack_manage#GetPackLs()

IsInstalled({plugin})                                 *pack_manage#IsInstalled()*
	* {plugin} が既に |runtimepath| に加わっているか確認する
	* ~/.vim/pack/github/opt に保存され、|packadd| されていないプラグインでは
	  |v:false| を返す

	{plugin}: 確認するプラグイン名

	使用法: >
		if !pack_manage#IsInstalled('plugin')
			packadd plugin
		endif

SetMAP({plugin}, {cmd}, {map})                             *pack_manage#SetMAP()*
	* nmap k <Plug>... の要領で <Plug> にマッピングするプラグインの遅延読み込みを
	  実現させる

	plugin: 読み込むプラグイン名
	cmd:    実際に実行するコマンド (先頭の <Plug> は省略)
	        <Plug>command1<Plug>command2 のように複数の場合は
	        'command1<Plug>command2' の様に先頭の <Plug> のみ除く
	map:    マッピングの内容の辞書リスト
	{
		mode: n, x, o などのモード
		key: 割り当てるキーマップ {lhs}
		cmd: 割り当てるコマンド (<Plug> を除く)
	}

	記載例: >
	call pack_manage#SetMAP('plugin', 'Commad', [
				\ {'mode': 'n', 'key': 'lhs',  'cmd': 'Commad'},
				\ {'mode': 'x', 'key': 'lhs',  'cmd': 'Commad'}
				\ ] )
