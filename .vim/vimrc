vim9script
# character code {{{1
set encoding=utf-8
scriptencoding utf-8
# ファイル・エンコードの自動判定優先順位 fileencodings を決める {{{
if has('iconv') # iconv を使って NEC 選定 IBM 拡張文字 (ⅰ) を変換して対応文字コードをチェック
	if iconv('ⅰ ', 'utf-8', 'iso-2022-jp-3') ==# "\x1B$(O,5\x1B(B " # iso-2022-jp-3 対応チェック
		&fileencodings = 'iso-2022-jp-3,'
	else
		&fileencodings = 'iso-2022-jp,'
	endif
	if iconv('ⅰ ', 'utf-8', 'eucjp-ms') ==# "\x8F\xF3\xF3 " # eucJP-ms 対応チェック
		&fileencodings ..= 'eucjp-ms,ucs-bom,utf-8,cp932,default,latin1'
	elseif iconv('ⅰ ', 'utf-8', 'euc-jisx0213') ==# "\xAC\xB5 " # JISX0213 対応チェック
		&fileencodings ..= 'euc-jisx0213,ucs-bom,utf-8,cp932,default,latin1'
	else
		&fileencodings ..= 'euc-jp,ucs-bom,utf-8,cp932,default,latin1'
	endif
else # iconvが無いときはシンプルに
	set fileencodings=iso-2022-jp,euc-jp,ucs-bom,utf-8,cp932,default,latin1
endif
# }}}
set fileformats=unix,dos,mac
set termencoding=utf-8
set makeencoding=char                          # 外部コマンドの出力を読むときに使用されるエンコーディングにシステムロケール使用
# 初期化 {{{1
set guioptions+=M                              #メニュー設定を読み込まない GUI だが vimrc で filetype on, syntax on より前に書く必要がある→:help go-M
filetype plugin indent on                      # ファイルタイプ別プラグインとインデントを ON
# 標準プラグイン {{{1
# 一部のプラグインは読み込まない {{{2
g:skip_loading_mswin = 1
g:loaded_getscript = 1
g:loaded_getscriptPlugin = 1
g:loaded_vimball = 1
g:loaded_vimballPlugin = 1
g:loaded_2html_plugin = 1
g:loaded_logiPat = 1
g:loaded_rrhelper = 1
# g:loaded_matchparen = 1
g:loaded_zipPlugin = 1 # {{{
g:loaded_zip = 1
augroup loadZipArchive
	autocmd!
	autocmd BufReadPre *.aar,*.apk,*.celzip,*.crtx,*.docm,*.docx,*.dotm,*.dotx,*.ear,*.epub,*.gcsx,*.glox,*.gqsx,*.ja,*.jar,*.kmz,*.odb,*.odc,*.odf,*.odg,*.odi,*.odm,*.odp,*.ods,*.odt,*.otc,*.otf,*.otg,*.oth,*.oti,*.otp,*.ots,*.ott,*.oxt,*.potm,*.potx,*.ppam,*.ppsm,*.ppsx,*.pptm,*.pptx,*.sldx,*.thmx,*.vdw,*.war,*.wsz,*.xap,*.xlam,*.xlam,*.xlsb,*.xlsm,*.xlsx,*.xltm,*.xltx,*.xpi,*.zip
				\ unlet g:loaded_zip g:loaded_zipPlugin | source $VIMRUNTIME/plugin/zipPlugin.vim
	autocmd BufRead *.aar,*.apk,*.celzip,*.crtx,*.docm,*.docx,*.dotm,*.dotx,*.ear,*.epub,*.gcsx,*.glox,*.gqsx,*.ja,*.jar,*.kmz,*.odb,*.odc,*.odf,*.odg,*.odi,*.odm,*.odp,*.ods,*.odt,*.otc,*.otf,*.otg,*.oth,*.oti,*.otp,*.ots,*.ott,*.oxt,*.potm,*.potx,*.ppam,*.ppsm,*.ppsx,*.pptm,*.pptx,*.sldx,*.thmx,*.vdw,*.war,*.wsz,*.xap,*.xlam,*.xlam,*.xlsb,*.xlsm,*.xlsx,*.xltm,*.xltx,*.xpi,*.zip
				\ ++nested edit!
				| autocmd! loadZipArchive
				| augroup! loadZipArchive
augroup END
# }}}
g:loaded_gzip = 1 # {{{ # $VIMRUNTIME/plugin/gzip.vim で exists("#BufReadPre#*.gz") は finish としているので、Vim 起動後に BufReadPre をトリガーとして遅延読み込みできない
g:loaded_tar                = 1
g:loaded_tarPlugin = 1
command GzipEnable unlet g:loaded_tar g:loaded_tarPlugin g:loaded_gzip
	| source $VIMRUNTIME/plugin/tarPlugin.vim
	| source $VIMRUNTIME/plugin/gzip.vim
	| delcommand GzipEnable
# augroup loadTarArchive
# 	autocmd!
# 	autocmd FileReadPre *.gz,*.bz2,*.Z,*.lzma,*.xz,*.lz,*.zst,*.br,*.lzo,*.tar,*.lrp,*.tbz,*.tgz,*.txz,*.tzs
# 				\ unlet g:loaded_tarPlugin | source $VIMRUNTIME/plugin/tarPlugin.vim
# 				| unlet g:loaded_gzip | source $VIMRUNTIME/plugin/gzip.vim
# 	autocmd BufRead *.tar.*,*.tar,*.tbz,*.tgz,*.txz,*.tzs
# 				\ ++nested edit!
# 				\ autocmd! loadTarArchive
# 				| augroup! loadTarArchive
# augroup END
# # }}}
# netrw {{{ ↓ fern を使う
g:loaded_netrw = 1
g:loaded_netrwSettings = 1
g:loaded_netrwFileHandlers  = 1
g:loaded_netrwPlugin = 1
# g:netrw_banner=0                           # バーナー非表示
# g:netrw_liststyle = 0                      # ファイル・サイズ/タイム・スタンプも非表示←除外がしにくくなる
# # g:netrw_list_hide = netrw_gitignore#Hide() .. '.*\.swp$' ヘルプに有る関数は遅い
# g:netrw_list_hide = '.*\.swp$,\.o$,\.fls$,\.synctex\.gz$,\.fdb_latexmk$,\.toc$,\.out$,\.dvi$,\.aux$,\.nav$,\.snm$,\.git/$' # 隠すファイル
# # g:netrw_sizestyle = 'H'                    # 人間が読める形式 (例: 5K, 4M, 3G) 1024 ベース
# g:netrw_sort_options = 'i'                 # ソートで大/小文字を区別しない
# # g:netrw_timefmt = '%Y/%m/%d(%a) %H:%M:%S'
# g:netrw_sort_by = 'time'                   # 日付で逆順ソート
# g:netrw_sort_direction = 'reverse'
# }}}
# 読み込み明示が必要な分 {{{2
packadd! editexisting                          # 既に開いていれば、そちらをアクティブに
packadd! matchit                               # 対応するカッコ移動%を拡張→ファイルタイプ別設定でb:match_words {{{
# }}}
# packadd termdebug                              # デバッガ ←vimspector を使う
# マウス {{{2
set mouse=a                                    # マウス有効化
set mousemodel=popup                           # マウス右クリックは Windows 風 (GUI のみ)
# set nomousefocus                               # デフォルト
# 折りたたみ {{{1
# set foldmethod=manual                          # 標準では手動←改めて設定する必要がない
set foldlevelstart=99                          # ファイル・オープン時は折りたたみは開いたまま
set foldcolumn=3                               # 折りたたみ状態を表示する左カラムの数
g:sh_fold_enabled = 7                          # シェルスクリプトの折りたたみ方法 ~/.vim/ftplugin/sh.vim で指定すると $ vim ~/.bashrc 等引数で開くと設定が反映されない
# Undo アンドゥ {{{1
if has('persistent_undo')
	set undodir=~/.vim/undo
	set undofile
endif
# IME {{{1
set iminsert=0 imsearch=-1                     # 挿入モード/検索開始時 IME OFF
# set imdisable                                  # Vim による IM 制御を使わない
# ↑「VIM - Vi IMproved 9.0 (2022 Jun 28, compiled Oct  8 2023 13:14:12)適用済パッチ: 1-1999」で一切 GVim の IME が ON にできなくなる
if has('unix') # ノーマル・モードになれば日本語 OFF にするために IM を調べる
	# if executable('im-config') # 外部プログラムを使うので 0.1〜0.2 [s] と他に比べて時間がかかる {{{
	# 	g:IME = systemlist('im-config -m') # 設定後に unlet するためにグローバル変数
	# 	# 0   active configuration (system)
	# 	# 1   active configuration (user)
	# 	# 2   automatic configuration for the current locale
	# 	# 3   override configuration for the current locale
	# 	# 4   automatic configuration for most locales
	# 	if g:IME[1] !=# ''
	# 		g:IME = g:IME[1]
	# 	elseif g:IME[0] !=# ''
	# 		g:IME = g:IME[0]
	# 	elseif g:IME[3] !=# ''
	# 		g:IME = g:IME[3]
	# 	elseif g:IME[2] !=# ''
	# 		g:IME = g:IME[2]
	# 	else
	# 		g:IME = g:IME[4]
	# 	endif
	# 	if g:IME == 'fcitx5'
	# 		g:IME = 'fcitx5-remote -c'
	# 	elseif g:IME == 'fcitx'
	# 		g:IME = 'fcitx-remote -c'
	# 	elseif g:IME == 'ibus' || g:IME == 'default'
	# 		g:IME = 'ibus engine "xkb:jp::jpn"'
	# 	else
	# 		g:IME = ''
	# 	endif
	# elseif executable('fcitx5-remote')
	# 	g:IME = 'fcitx5-remote -c'
	# elseif executable('fcitx-remote')
	# 	g:IME = 'fcitx-remote -c'
	# elseif executable('ibus')
	# 	g:IME = 'ibus engine "xkb:jp::jpn"'
	# else
	# 	g:IME = ''
	# endif
	# if g:IME !=# ''
	# 	augroup IME
	# 		autocmd!
	# 		execute 'autocmd VimEnter,InsertLeave,CmdwinLeave,CmdlineLeave * system("' .. g:IME .. '")'
	# 		execute 'autocmd FocusGained * if mode(1) !~# "^[iR]" | system("' .. g:IME .. '") | endif'
	# 		execute 'autocmd ModeChanged R*:n*                      system("' .. g:IME .. '")'
	# 		# ↑R (置換モード) ReplaceLeave は無い
	# 		# ModeChanged *:n* に纏められれば良いが、inoremap <expr><buffer><S-Enter>   pumvisible#Insert('<li>') でも変わってしまう
	# 		# (r{char} に対応する他の方法がわからない
	# 		execute 'autocmd TextChanged *                          system("' .. g:IME .. '")'
	# 	augroup END
	# endif
	# unlet g:IME # }}}
	augroup IME
		autocmd!
		autocmd VimEnter,InsertLeave,CmdwinLeave,CmdlineLeave * system("fcitx5-remote -c")
		autocmd FocusGained * if mode(1) !~# "^[iR]" | system("fcitx5-remote -c") | endif
		autocmd ModeChanged R*:n*                      system("fcitx5-remote -c")
		# ↑R (置換モード) ReplaceLeave は無い
		# ModeChanged *:n* に纏められれば良いが、inoremap <expr><buffer><S-Enter>   pumvisible#Insert('<li>') でも変わってしまう
		# (r{char} に対応する他の方法がわからない
		autocmd TextChanged *                          system("fcitx5-remote -c")
	augroup END
else
	inoremap <silent><Esc> <Esc><Cmd>setlocal iminsert=0<CR>
endif
# 表示関係 {{{1
set shortmess+=IWc shortmess-=S                # I 起動時にファイル未指定時に表示される紹介文を表示しない
                                               # W ファイルの書き込み時に "書込み" や "[w]" を表示しない。
                                               # c	補完関連のメッセージを表示しない
                                               # S 検索ヒット件数表示←コマンドラインに検索のヒット位置、総個数を [?/?] で表示し、ファイルの先頭・終端になった時のメッセージが一瞬で消える
syntax enable                                  # カラー表示 ON
set nomore                                     # メッセージが一杯になっても一旦停止せずそのまま続ける
set noshowcmd                                  # コマンドラインに選択中の文字数などを表示する
# set noequalalways                              # ウィンドウ分割/閉じた時に全てのウィンドウを同じ大きさにしない←すでに分割されていると、プラグインが開くウィンドウ高さが狭くなり使いにくい
# 対応するカッコ {{{2
set cpoptions+=MI                              # 対応するカッコで、\によるエスケープを除外+インデントの自動削除なしに
if $LANG !=# 'C'                               # LANG=C では全角文字が使えない
	set matchpairs+=<:>,「:」,（:）,『:』,【:】,‘:’,“:” # 対応括弧に<と>のペアやカギカッコを追加
else
	set matchpairs+=<:>                          # 対応括弧に<と>のペアを追加←日本語含まず
endif
# タブ、空白、改行の可視化 {{{2
set list                                       # 通常は空白文字表示↓代わりに表示する記号
set listchars=tab:»\ ,trail:␣,eol:⏎,extends:»,precedes:«,space:␣,nbsp:%
# ↓空白の後で折り返されていると空白の有無が判らない
# set listchars=tab:»\ ,trail:\ ,eol:⏎,extends:»,precedes:«,space:\ ,nbsp:%
# 空白などの不可視文字は_にすると、カーソル行の色指定との関係で、_自身と区別しにくい。eol の候補は他に→が有る ↵
set fillchars=vert:\|,fold:\ ,
set noexpandtab                                # 通常はタブ文字入力可能に
# カーソル行 {{{2
set number signcolumn=yes                      # 行番号、sign (マーク表示桁) 表示
augroup CoursolLineColumn # 挿入モードでは、カーソール行桁背景色無し、ノーマル・モードでは付ける
	autocmd!
	autocmd WinEnter,TabEnter     *              set cursorline cursorcolumn
	autocmd WinLeave,InsertEnter  *              set nocursorline nocursorcolumn
	autocmd InsertLeave  *                       set cursorline cursorcolumn
augroup END
set cursorline cursorcolumn                    # 起動時は、カーソール行桁背景色付ける
# タブ・ページ/ターミナル環境の時のカーソル形状 {{{2
set showtabline=0 tabpagemax=500               # 常にタブを非表示+上限 500
if !has('gui_running')                         # タブページの書式変更
# if has('gui_running')                          # タブページの書式変更
# 	set guitablabel=%!mk_tabline#GUI()
# else
# 	set tabline=%!mk_tabline#CUI()
	# CUI のカーソル形状
	&t_SI ..= "\e[5 q"                           # 挿入:    縦棒
	&t_EI ..= "\e[1 q"                           # ノーマル:箱型
	&t_SR ..= "\e[3 q"                           # 置換:    下線
endif
# インデント {{{2
set autoindent smartindent                     # オートインデント+改行時に行末記号に合わせてインデント増減
# set cindent                                  # 全てで C 言語風のインデントが適用されるので、ローカルで行うべき
set tabstop=2 shiftwidth=2                     # タブ文字は2文字分に合わせてインデントは2文字
set breakindent                                # 行頭空白の折り返し行で見かけ上インデント
set formatlistpat=^\\c\\s*\\(\\d\\+[]:.)\\t\ ]\\\|(\\?[0-9a-z]\\+)\\\|[a-z][.\\t\ ]\\\|\\[[0-9a-z]\\]\\)\\?\\s* # 箇条書きとみなす空白、数値、1文字英字とカッコの組み合わせ
set breakindentopt=shift:0,min:10,list:0       # 見かけ上のインデント量を formatlistpat にヒットした文字数にする (list:-1はタブ文字も1文字なので、tabstop-1だけずれる)
# コマンド・バー {{{2
tabdo set cmdheight=1                          # コマンドバー調整
set wildmenu wildmode=longest:full wildoptions=pum # 補完が拡張モード+最長展開+ポップアップ
set suffixes+=.aux,.log,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.toc,.pdf,.synctex.gz # 補完の優先度を下げる拡張子
set wildignore+=*.dvi,*.o,*.opp,*.obj,*.a,*.so,*.fdb_latexmk,*.fls,*.nav,*.out,*.snm,*.ltjruby,*.swp # 補完候補から完全に除外 (含めると補完候補にも現れなくなる)
# ステータス・バー {{{2
set laststatus=2                               # 表示
set statusline=%#StatusLineLeft#%-19.(%{tabpagenr()}/%{tabpagenr('$')}:%n%{%&buftype=='terminal'?'[terminal]':&buftype=='help'?'%h':&filetype=='fugitive'\|\|&filetype=='git'?'%y':'%y%w%r%m'%}%)%*\ %<%F%=%#StatusLineRight#\ %c:%v:%{strcharlen(strpart(getline('.'),0,col('.')))}/%{strlen(join(getline(0,line('$')),(&ff=='dos'?'12':'1')))}:%{strcharlen(join(getline(0,line('$')),''))}\ %3l/%L%4p%%\ 0x%04B\ [%{&fenc!=''?&fenc:&enc}:%{%{'dos':'CR+LF','unix':'LF','mac':'CR'}[&ff]%}]
# 表示しているのを大雑把に↓
# tabpagenr()/tabpagenr('$') bufnr filetype modified etc. | path | column bytes:number:word-count/file bytes:word-count line current/full % code charset:cr/lf
def StatusLineLeftRight(): void
	highlight StatusLineLeft gui=bold term=bold guifg=white guibg=SeaGreen ctermfg=white ctermbg=2
	highlight StatusLineRight gui=bold term=bold guifg=white guibg=DarkYellow ctermfg=white ctermbg=3
enddef
augroup StatusLineLeftRight
	autocmd!
	autocmd ColorScheme * StatusLineLeftRight()
				# | autocmd! StatusLineRight
				# | augroup! StatusLineLeft
				# 削除すると colorscheme を変更すると Normal 色になる
augroup END
# # 全角スペースをハイライト表示←フォントで対応したのですべてコメント・アウト {{{2
# function s:ZenkakuSpace()
# 	highlight ZenkakuSpace cterm=reverse ctermfg=Black gui=reverse guifg=#CCCCCC
# endfunction
# # if &t_Co > 1                                 # ←上でターミナル起動も256色にしている
# # 	syntax enable
# # endif
# if has('syntax') && !has('gui_running')        # 全角空白が可視化されるフォントを使っている
# 	augroup ZenkakuSpace
# 		autocmd!
# 		autocmd ColorScheme       * s:ZenkakuSpace()
# 		autocmd VimEnter,WinEnter * match ZenkakuSpace /　/
# 	augroup END
# 	s:ZenkakuSpace()
# endif
# カーソル・キー {{{1
set keymodel=startsel,stopsel                  # シフトキー+矢印キーで選択が出来る
set whichwrap=b,s,h,l,<,>,[,]                  # カーソルを行頭、行末で止まらないようにする
set virtualedit=block                          # 矩形選択でカーソル以降も範囲選択可能に
# 検索 {{{1
set incsearch                                  # インクリメンタルサーチ
set ignorecase smartcase                       # 小文字のみの検索では大文字/小文字を無視し、大文字が含まれると区別する
set infercase                                  # 補完時に大文字/小文字をいい感じに調節してくれる
# set hlsearch                                   # 検索ハイライトはトグル・スイッチにするために autocmd と map で行う
# 一時的な取り消しが <Esc> を二回だと一回の <Esc> の反応が悪くなる
nnoremap <expr><leader><Space> &hlsearch ? '<Cmd>set nohlsearch<CR>' : '<Cmd>set hlsearch<CR>'
xnoremap <expr><leader><Space> &hlsearch ? '<Cmd>set nohlsearch<CR>' : '<Cmd>set hlsearch<CR>'
nnoremap *  *<Cmd>set hlsearch<CR>
xnoremap *  *<Cmd>set hlsearch<CR>
nnoremap #  #<Cmd>set hlsearch<CR>
xnoremap #  #<Cmd>set hlsearch<CR>
# 上/下候補はハイライト OFF のままにしておきたいことが有る
# nnoremap n  n<Cmd>set hlsearch<CR>
# xnoremap n  n<Cmd>set hlsearch<CR>
# nnoremap N  N<Cmd>set hlsearch<CR>
# xnoremap N  N<Cmd>set hlsearch<CR>
# ファイルの扱い {{{1
# 読み込み、保存関係
# 保存時の末尾空白削除は、autocmd なので別場所
# set autochdir                                  # カレントディレクトリを現在のファイルとする→autocmd で lcd 変更だけにする
set autoread                                   # 外部のエディタで編集中のファイルが変更されたら、自動的に読み直す
# set autowriteall                              # 自動保存
set switchbuf=usetab                           # 新しく開く代わりにすでに開いてあるバッファを開く
set hidden                                     # 未保存ファイルがあってもファイルが開けるようにする
# set updatetime=500                             # .viminfoの更新時間 (プラグインの機能の更新時間にも使われる)
set browsedir=buffer                           # ファイルブラウザーの開始時、バッファで開いているファイルのディレクトリ
# スクリプト・ローカル変数の宣言 {{{1
var pos: list<number>                          # getpos()
# 分類のない autocmd {{{1
augroup VIMRC
	autocmd!
	autocmd BufReadPost * if &modifiable && search('[^\t -~]', 'cnw') == 0 | set fileencoding=utf-8 | endif # ASCII のみの時も utf-8 を使う
	autocmd QuickfixCmdPost make,grep,grepadd,vimgrep,vimgrepadd topleft copen # cwindow を使うと、make で使用されるプログラムによってカーソル位置がずれる
	autocmd QuickfixCmdPost lmake,lgrep,lgrepadd,lvimgrep,lvimgrepadd topleft lopen
	autocmd BufEnter,BufFilePost,BufNewFile,BufRead * change_directory#Lcd()
	# autocmd VimEnter    * if exists(':Explore') | delcommand Explore | endif # netrw の使用自体取りやめ
	# 見かけ上のインデント量を formatlistpat にヒットした文字数にする
	autocmd BufEnter,BufFilePost,BufNewFile,BufRead *
				\ if &filetype ==# '' || &filetype ==# 'text' || &filetype ==# 'markdown'
				| setlocal breakindentopt=shift:0,min:10,list:-1
				| endif
	autocmd BufWritePre * if &filetype != 'markdown' | pos = getpos('.') | :%s/\(^--\|^>.*\)\@<![ \u000B\t\r　]\+$//e | setpos('.', pos) | endif # メール署名の区切りと引用行以外の行末空白を保存時に削除
	# autocmd TerminalOpen *                       nnoremap <silent><buffer>q :bwipeout<CR>
	# ↑ターミナルで効いていないし、fzf を使ったバッファで q で閉じる意図しない動きになってしまう
	# ウィンドウ切り替えでもとの位置に戻ってしまう
	# autocmd BufEnter,BufWinEnter *
	# 			\ silent if &diff |
	# 			\ execute 'normal! gg]c[c' |
	# 			\ endif # diff モードでは、最初の差分(先頭が差分のことも有るので、]c[c と二重指定)
	# 			ウィンドウ切り替えで最初に戻ってしまう
	# 			↓と上手く両立しない
	autocmd BufReadPost *
				\ silent if &filetype !~# 'commit' && line("'\"") > 1 && line("'\"") <= line("$")
				| 	execute 'normal! g`"'
				| endif #前回閉じた時のカーソル位置に移動← $VIMRUNTIME/defaults.vim
	autocmd BufEnter * if getftype(expand('%')) ==# 'link' | symbolic_link#Normalize() | endif # シンボリック・リンクは展開
	autocmd BufEnter           *.sw?          bwipeout!             # スワップファイルは閉じる
	autocmd BufEnter           tags           edit ++encoding=utf-8 # tags ファイルは UTF-8 強制←開き直しているが他にもっと良い方法が解らない
	# ハイライトはトグル・スイッチ
	autocmd CmdlineLeave,CmdwinLeave * if (getcmdtype() =~# '[/?]' || getcmdwintype() =~# '[/?]') && pos != getpos('.') | set hlsearch | endif
	autocmd CmdwinEnter * pos = getpos('.')
	# ↓~/.vim/ftplugin/qf.vim, ~/.vim/after/ftplugin/qf.vim に書いてみたが効かなかった
	autocmd FileType qf &l:statusline = '%#StatusLineLeft#%t %*%<' .. (exists('w:quickfix_title') ? substitute(w:quickfix_title, '\(cexpr system("\)\?/usr/bin/grep -nHsI --color=never -d skip --exclude-dir=\.git\( --exclude={[^}]\+}\)\? \(.*\) /dev/null\(")->substitute(''\\ze\\n'', ":1: ", "g")\)\?$', 'grep \3', '') : '') .. '%=%#StatusLineRight#%3l/%L%4p%%'
augroup END
# 日本語の表示/編集に関わる設定 {{{1
set backspace=indent,eol,start
if exists('&ambiwidth')                        # □とか○の文字があってもカーソル位置がずれないようにする
	set ambiwidth=double
	setcellwidths([                         # 一部を再度半角/全角明示指定
		[0xA1, 0xA1, 1], [0xA7, 0xA7, 1], [0xAA, 0xAA, 1], [0xAE, 0xAE, 1], [0xB0, 0xB4, 1], [0xB6, 0xB6, 1], [0xB9, 0xBA, 1], [0xBF, 0xBF, 1], # ¡§®°±´¶¿と上付き
		[0xC0, 0x01C3, 1], [0x01CD, 0x01F0, 1], [0x01F4, 0x02A2, 1], [0x02AC, 0x02AF, 1], # ASCII 外のラテン文字と ×÷
		[0x02D0, 0x02D0, 1],                       # ː
		[0x03B1, 0x03C9, 1], [0x0391, 0x03A9, 1],  # ギリシャ文字
		[0x2B0, 0x2B3, 1], [0x2B7, 0x2B8, 1], [0x2E1, 0x2E3, 1], [0x1D2C, 0x1D61, 1], [0x1D9B, 0x1DBF, 1], [0x2070, 0x2071, 1], [0x2074, 0x2075, 1], [0x207F, 0x207F, 1], [0x2C7D, 0x2C7F, 1], # 上付き文字
		[0x1D62, 0x1D6A, 1], [0x2080, 0x209C, 1], [0x2C7C, 0x2C7C, 1], # 下付き文字
		[0x2012, 0x2013, 1],                       # ダッシュ ‒ (数字と同じ幅のFigure dash), – (二分ダッシュ)
		[0x2018, 0x201F, 1], [0x2032, 0x2037, 1],  # 引用符と分・
		[0x20A0, 0x20A6, 1], [0x20A7, 0x20A8, 2], [0x20A9, 0x20AE, 1], [0x20AF, 0x20AF, 2], [0x20B0, 0x20C0, 1], # 通貨記号 (2 文字結合以外は半角)
		[0x2102, 0x22FF, 2],                       # ℃などの文字様記号+ローマ数字 (3 以上は欠けるので全て全角幅に)+数式記号
		[0x401, 0x401, 1], [0x410, 0x4F9, 1],      # キリル文字 (フォントの関係か上手く半角にならない文字も有る)
		[0x2500, 0x27BF, 2],                       # 罫線、ブロック要素、絵文字の一部 (装飾記号)
		])
	# [0x2010, 0x2010, 1],                       # ‐は全角ハイフン
	# 半角のデザインが中途半端
endif
set formatoptions+=mMj1 formatoptions-=tc      # 日本語の行の連結時には空白を入力しない+textwidth を使った自動折返しをしない
set display+=lastline                          # 画面最後の行をできる限り表示
set wrap                                       # 長い行は折り返し表示
set sidescroll=1                               # 横スクロールでカーソル位置を真ん中にしない
set linebreak                                  # wrap at 'breakat
set breakat-=@*-+;:,. breakat+=)}>             # break point for linebreak (default " ^I!@*-+;:,./?" )→" ^I!?" になる (日本語は全角文字に空白が余分に表示されてしまう←helpに8bit文字のみとある)
set helplang=ja,en                             # 日本語ヘルプを優先的に表示
# gf などでファイルとして扱う文字 {{{1
set isfname+=: isfname-=# isfname-==           # Maildir では : がフラグの前置文字 HTML では # は id+シェルスクリプトなどで = は代入
# ファイルタイプ別設定 {{{1 ftplugin/ では設定できない分
g:tex_flavor = 'latex'                         # *.tex の新規作成などで plainTeX ではなく LaTeX として扱う
g:markdown_folding = 1                         # Markdown で折りたたみ
g:html_indent_script1 = 'inc'
g:html_indent_style1 = 'inc'
g:html_indent_autotags = 'html,body,tbody'
# grep {{{1
set grepprg=/usr/bin/grep\ $*\ /dev/null       # --exclude は --include を使った時に無効にしたいのでコマンドにして分岐する
# -nH といったオプションもそちらで指定している
# 	* 再帰的に行うには -r, --recursive オプション
# 	* コマンドで分岐処理を入れているので --include=*.txt 等とすれば、制限できる
# set grepformat=%f:%l:%m,%f:%l%m,%f\ \ %l%m,%f  # grep の出力は -L/--files-without-match, -l/--files-with-matches を付けた時の為ファイル名のみを出力追加したいが、binary file matches などの警告もヒットのように扱ってしまう
# キー割り当てを除いたその他 {{{1
set keywordprg=:help
set modeline
# set modeline modelineexpr
$LESS = substitute($LESS, '\(['' " =]\)-\(-quit-if-one-screen\|F\)\>', '\1', 'g') # less 環境変数置き換え
# ↑alias は外部フィルタ無効+選択状態でうまく処理してくれない
set textwidth=0                                # 自動改行させない
set shellslash                                 # Windowsでもパス区切りにスラッシュを使える
set diffopt=filler,context:2,iwhite,vertical,closeoff,internal,algorithm:histogram,indent-heuristic # 差分表示オプション
set path+=~/bin,~/Templates,
set conceallevel=0                             # 個々のファイルタイプごとで、文字を省略したり置き換える機能は使わない
if has('path_extra')                           # tags ファイルは $HOME まで辿る :help file-searching
	set tags+=tags;$HOME/
endif
set belloff=all                                # 音を消す
# set visualbell                                 # 多くの colorscheme や tmux, Gvim で効かない
# set mouse=a                                  # マウスの設定全てのモードで有効に:デフォルトでそうなっていた
set delcombine                                 # 結合文字を別々に削除する
# set maxcombine=2                               # 結合文字の最大個数
set clipboard=exclude:cons\|linux              # クリップボードの扱い
set viminfo+=n~/.vim/viminfo                   # viminfo の保存先
set history=500                                # コマンド履歴の保存数 (あまり大きくすると q: 等で時間がかかるようになる)
# set runtimepath+=/usr/share/vim/addons,/usr/share/vim/vimfiles
set runtimepath+=/usr/share/vim/addons
set spell spelllang+=cjk                        # スペル・チェック
set completeopt=menuone,noinsert,noselect,popup # 補完
# 個人的なキー割り当て keymap キーマップ {{{1
# 設定の切り替え {{{2
nnoremap <silent><leader>cb <Cmd>setlocal linebreak!<CR>
nnoremap <silent><leader>cc <Cmd>set showcmd!<CR>
nnoremap <silent><leader>cd <Cmd>call change_directory#Lcd()<CR>
nnoremap <silent><leader>cm <Cmd>set more!<CR>
nnoremap <silent><leader>cs <Cmd>let &l:scrolloff = ( &scrolloff ? 0 : ( &lines > 20 ? &lines / 4 : 5 ) )<CR>
nnoremap <silent><leader>ct <Cmd>let &showtabline = ( &showtabline ? 0 : 2 )<CR>
nnoremap <silent><leader>cw <Cmd>setlocal wrap!<CR>
# ↑autocmd が :FZF で効かない
# |SafeState|		保留中のものはなく、ユーザーの文字入力を待つとき
# |SafeStateAgain|	繰り返された SafeState
# gvimrc に書かれた分 {{{3
# nnoremap <leader>cM <Cmd>call toggle#Menu()<CR>
# nnoremap <leader>cT <Cmd>call toggle#Toolbar()<CR>
# 日付と時刻入力 {{{2
inoremap <silent><expr><C-X><C-D> strftime('%Y/%m/%d')
inoremap <silent><expr><C-X><C-T> strftime('%H:%M:%S')
# スクロール {{{2
# nnoremap <Space> <PageDown> # → ~/.vim/pack/my-plug/opt/page-down
nnoremap <S-Space> <PageUp>
nnoremap <BS> <PageUp>
xnoremap <Space> <C-D>
xnoremap <S-Space> <C-U>
xnoremap <BS> <C-U>
# ターミナル・モード {{{2
set termwinscroll=30000                         # ターミナルで遡れる行数
# tmux で <prefix> を <C-J> に合わせてると端末で使えない
tnoremap <silent><C-W><C-[> <C-W>N
tnoremap <silent><C-W><Esc> <C-W>N
# ↑端末ノーマル・モードに移行
tnoremap <C-W>p <C-W>""
# ↑貼り付け
# QuickFix {{{2
nnoremap <silent><Leader>qf :wall<CR>:silent make<CR>:cwindow<CR>
# ↑QuickFix ではないが、やりたいことは似ているので、ここに一緒に書いておく
# QuickFix と diff モードに共通キー (次/前の変更/エラー箇所を共通化)
nnoremap <silent><expr>]c   &diff ? ']c' : ':cnext<CR>'
nnoremap <silent><expr>[c   &diff ? '[c' : ':cprevious<CR>'
nnoremap <silent>]C         <Cmd>cnfile<CR>
nnoremap <silent>[C         <Cmd>cpfile<CR>
# 移動系 {{{2
nnoremap <silent>[l         <Cmd>lprevious<CR>
nnoremap <silent>]l         <Cmd>lnext<CR>
nnoremap <silent>[L         <Cmd>lpfile<CR>
nnoremap <silent>]L         <Cmd>lnfile<CR>
nnoremap <silent>[b         <Cmd>bprevious<CR>
nnoremap <silent>]b         <Cmd>bnext<CR>
nnoremap <silent>[C         <Cmd>cpfile<CR>
nnoremap <silent>]C         <Cmd>cnfile<CR>
nnoremap <silent>[E         g;
nnoremap <silent>]E         g,
nnoremap <silent>[e         <Cmd>call move_changed#Main(0)<CR>
nnoremap <silent>]e         <Cmd>call move_changed#Main(1)<CR>
nnoremap <silent>[w         <C-W>W
nnoremap <silent>]w         <C-W>w
nnoremap <silent>[T         <Cmd>tprevious<CR>
nnoremap <silent>]T         <Cmd>tnext<CR>
# ]t,[t は下記のマッピングタブ・モードの切り替えに使っている
# タブページの切り替えキー設定 {{{2
nnoremap <silent>]t        gt
nnoremap <silent>[t        gT
noremap  <silent><C-Tab>   gt
tnoremap <silent><C-Tab>   <C-W>gt
inoremap <silent><C-Tab>   <C-PageDown>
noremap  <silent><S-C-Tab> gT
tnoremap <silent><S-C-Tab> <C-W>gT
inoremap <silent><S-C-Tab> <C-PageUp>
# クリップボードのコピー、ペースト、切り取り+ポップアップが表示されているときの切り替え {{{2
vnoremap <C-C> "+y
vnoremap <C-Y> "+y
xnoremap Y "+y
# ↑元の v_Y ほぼ v_y と同じだが行単位←元々行単位なら V を使う
vnoremap <C-Insert> "+`y
vnoremap <Insert> "+gp
vnoremap <S-Insert> "+gp
nnoremap <C-P> "+gp
nnoremap <Insert> "+gp
nnoremap <S-Insert> "+gp
# vnoremap <C-X> "+x                            # デフォルトでカーソル位置の数字減算にマップ (ctrl-aとペア)
# vnoremap <C-D> "+x                            # デフォルトで下方スクロールにマップ
xnoremap <S-Del> "+x
xnoremap X "+x
# ↑元の v_X ほぼ v_x と同じだが行単位←元々行単位なら V を使う
inoremap <S-Insert> <C-R>+
inoremap <Insert> <C-R>+
# inoremap <S-C-P> <C-R>+                        # 下と重なり無効になる←modifyOtherKeys
# inoremap <C-P> <C-R>"
inoremap <expr><C-P> pumvisible() ? '<C-P>' : '<C-R>"'
#↑ insert moode の補完候補の選択にも使っている
# inoremap <S-C-V> <C-R>+                        # 素の Ctrl-V が使えなくなる
cnoremap <S-Insert> <C-R>+
cnoremap <Insert> <C-R>+
# cnoremap <S-C-P> <C-R>+                        # Ctrl-pの割当と重なり無効になる
cnoremap <expr><C-P> pumvisible() ? '<Up>' : '<C-R>"'
cnoremap <expr><C-J> pumvisible() ? '<Down>' : '<C-J>"'
#↑ command moode の補完候補の選択にも使っている
# 選択範囲の貼り付けで、直前のレジスタを連続して貼り付け←vimの連続コピペできない問題 https://baqamore.hatenablog.com/entry/2016/07/07/201856
xnoremap <expr>p 'pgv"' .. v:register .. 'y`>'
# 選択モード不明
# snoremap <expr><C-P> '<C-G>pgv"' .. v:register .. 'y`>'
# 2つを入れ替えたい時は、書き換わったほうが都合が良いので、大文字側はデフォルトのままにしておく
# 挿入/コマンドモード時のカーソル移動 {{{2
# [Henkan] を [BS] に割り当てているので、<C-H> は他に割り当てる
inoremap <C-H> <C-G>U<Left>
inoremap <Left> <C-G>U<Left>
cnoremap <C-H> <Left>
inoremap <expr><C-J> pumvisible() ? '<Down>' : '<C-J>'
xnoremap <expr><C-J> pumvisible() ? '<Down>' : '<C-J>'
#↑ insert moode の補完候補の選択にも使っている
inoremap <C-K> <Up>
inoremap <C-L> <C-G>U<Right>
inoremap <Right> <C-G>U<Right>
cnoremap <C-L> <Right>
cnoremap <C-A> <Home>
cnoremap <C-B> <Left>
# コマンドモードで <Del> に <S-BS> と <C-D> を割り当て (前者はターミナルで聞かない)
# オリジナルの <C-D> (c_CTRL-D) は <Tab> で代用可
cnoremap <C-D> <Del>
cnoremap <S-BS> <Del>
inoremap <expr><C-N> pumvisible() ? '<C-N>' : '<Down>'
vnoremap <expr><C-N> pumvisible() ? '<C-N>' : '<Down>'
#↑ insert moode の補完候補の選択にも使っている
# コマンドモードで素早くカレント・ディレクトリ入力 {{{2
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h') .. '/' : '%%'
# コマンドモードの <C-N>, <C-K> を <Up>, <Down> に割当 {{{2
cnoremap <C-N> <Down>
cnoremap <C-K> <Up>
# カーソル下のファイルを開く# gfと<C-W> を入れ替えつ (なお gf はプラグインで :tabe 相当に (開いていれば、そちらをアクティブ)) {{{2
# F 大文字は、後ろに数字が有れば、行番号として開く
nnoremap <C-W>gf gf
nnoremap <C-W>gF gF
nnoremap <silent>gF <C-W>gF
# <BS> などがアンドゥーの単位になるように {{{2
# 一般的な [BS] と同等
# inoremap <C-H> <C-G>u<BS>
inoremap <BS> <C-G>u<BS>
inoremap <Del> <C-G>u<Del>
inoremap <S-BS> <C-G>u<Del>
# ウィンドウ・サイズ変更 <C-W> の後の [+], [-], [<], [>] を押しっぱなしでサイズ変更できる {{{2
nmap <C-W>+ <C-W>+<SID>ws
nmap <C-W>- <C-W>-<SID>ws
nmap <C-W>> <C-W>><SID>ws
nmap <C-W>< <C-W><<SID>ws
nnoremap <script><SID>ws+ <C-W>+<SID>ws
nnoremap <script><SID>ws- <C-W>-<SID>ws
nnoremap <script><SID>ws> <C-W>><SID>ws
nnoremap <script><SID>ws< <C-W><<SID>ws
nmap <SID>ws <Nop>
# 選択範囲で検索 {{{2
xnoremap <Leader>/ <Esc>/\%V
# 範囲選択中の増加、減少 (インクリメント、ディクリメント) は、再度選択状態に戻す {{{2
# vim-speeddating の組み合わせでうまくいかない
# vnoremap <C-A> <C-A>gv
# vnoremap <C-X> <C-X>gv
set nrformats=bin,hex,alpha                      # アルファベットでもインクリメント、ディクリメント←8進数,octalは除外
# j, gj, k, gk の入れ替え {{{2
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k
nnoremap <Down> gj
nnoremap <Up>   gk
xnoremap j gj
xnoremap k gk
xnoremap gj j
xnoremap gk k
vnoremap <Down> gj
vnoremap <Up>   gk
# 記号で括る系を [Shift] 無しで可能にする (JIS キーボード向け) {{{2
onoremap a2 a"
xnoremap a2 a"
onoremap i2 i"
xnoremap i2 i"
onoremap a7 a'
xnoremap a7 a'
onoremap i7 i'
xnoremap i7 i'
onoremap a8 a(
xnoremap a8 a(
onoremap i8 i(
xnoremap i8 i(
onoremap a9 a)
xnoremap a9 a)
onoremap i9 i)
xnoremap i9 i)
onoremap a@ a`
xnoremap a@ a`
onoremap i@ i`
xnoremap i@ i`
onoremap a, a<
xnoremap a, a<
onoremap i, i<
xnoremap i, i<
onoremap a. a>
xnoremap a. a>
onoremap i. i>
xnoremap i. i>
